# Example of a full infrastructure stack
#
# Note, this file is not suitable for a production deployment. It is only an
# example of all the infrastructure components needed in a real production
# deployment.
#
# Usage::
#
#   $ docker-compose up -f docker-compose.full.yml -d
#
# Following services are included:
# - Frontend: Nginx (exposed ports: 40 and 443)
# - UI application: UWSGI (not exposed)
# - API application: UWSGI (not exposed)
# - Cache: Redis (exposed port: 6379)
# - DB: (PostgresSQL/MySQL) (exposed port: 5432 or 3306)
# - Message queue: RabbitMQ (exposed ports: 5672, 15672)
# - Elasticsearch (exposed ports: 9200, 9300)
# - Kibana (view ES indexes) (exposed ports: 5601)
#
version: '3.8'
services:
  cache:
    image: redis
    restart: "unless-stopped"
    read_only: true
    ports:
      - "6379:6379"
  db:
    image: postgres:12.4
    restart: "unless-stopped"
    environment:
      - "POSTGRES_USER=my-site"
      - "POSTGRES_PASSWORD=my-site"
      - "POSTGRES_DB=my-site"
    ports:
      - "5432:5432"
  mq:
    image: rabbitmq:3.8-management
    restart: "unless-stopped"
    ports:
      - "15672:15672"
      - "5672:5672"
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    restart: "unless-stopped"
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:9200/_cluster/health?wait_for_status=green"]
      interval: 30s
      timeout: 30s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          # cpus: '0.50'
          memory: 1g
        # reservations:
        #   cpus: '0.25'
        #   memory: 20M
    # mem_limit: 1g
    ports:
      - "9200:9200"
      - "9300:9300"
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    environment:
      - "ELASTICSEARCH_HOSTS=http://es:9200"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "5601:5601"
  pgadmin:
    image: dpage/pgadmin4:5.2
    restart: "unless-stopped"
    ports:
      - "5050:80"
      - "5051:443"
    environment:
      PGADMIN_DEFAULT_EMAIL: "info@my-site.com"
      PGADMIN_DEFAULT_PASSWORD: "my-site"
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
  # Frontend
  frontend:
    # build: ./docker/nginx/
    image: ghcr.io/turath-project/turath-inveniordm_frontend:v0.1
    restart: "unless-stopped"
    ports:
      - "80"
      - "443"
    volumes:
      - static_data:/opt/invenio/var/instance/static
    # depends_on:
    #   - web-ui
    #   - web-api
    ports:
      - "80:80"
      - "443:443"
  # UI Application
  web-ui:
    image: ghcr.io/turath-project/turath-inveniordm:v0.1
    restart: "unless-stopped"
    environment:
      - "INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://cache:6379/1"
      - "INVENIO_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CACHE_REDIS_URL=redis://cache:6379/0"
      - "INVENIO_CACHE_TYPE=redis"
      - "INVENIO_CELERY_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CELERY_RESULT_BACKEND=redis://cache:6379/2"
      - "INVENIO_SEARCH_ELASTIC_HOSTS=['es:9200']"
      - "INVENIO_SECRET_KEY=CHANGE_ME"
      - "INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://my-site:my-site@db/my-site"
      - "INVENIO_WSGI_PROXIES=2"
      - "INVENIO_RATELIMIT_STORAGE_URL=redis://cache:6379/3"
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini"]
    ports:
      - "5000"
    volumes:
      - static_data:/opt/invenio/var/instance/static
      - uploaded_data:/opt/invenio/var/instance/data
      - archived_data:/opt/invenio/var/instance/archive

  # API Rest Application
  web-api:
    image: ghcr.io/turath-project/turath-inveniordm:v0.1
    restart: "unless-stopped"
    environment:
      - "INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://cache:6379/1"
      - "INVENIO_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CACHE_REDIS_URL=redis://cache:6379/0"
      - "INVENIO_CACHE_TYPE=redis"
      - "INVENIO_CELERY_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CELERY_RESULT_BACKEND=redis://cache:6379/2"
      - "INVENIO_SEARCH_ELASTIC_HOSTS=['es:9200']"
      - "INVENIO_SECRET_KEY=CHANGE_ME"
      - "INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://my-site:my-site@db/my-site"
      - "INVENIO_WSGI_PROXIES=2"
      - "INVENIO_RATELIMIT_STORAGE_URL=redis://cache:6379/3"
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini"]
    ports:
      - "5000"
    volumes:
      - uploaded_data:/opt/invenio/var/instance/data
      - archived_data:/opt/invenio/var/instance/archive

  # Worker
  worker:
    image: ghcr.io/turath-project/turath-inveniordm:v0.1
    restart: "unless-stopped"
    environment:
      - "INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://cache:6379/1"
      - "INVENIO_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CACHE_REDIS_URL=redis://cache:6379/0"
      - "INVENIO_CACHE_TYPE=redis"
      - "INVENIO_CELERY_BROKER_URL=amqp://guest:guest@mq:5672/"
      - "INVENIO_CELERY_RESULT_BACKEND=redis://cache:6379/2"
      - "INVENIO_SEARCH_ELASTIC_HOSTS=['es:9200']"
      - "INVENIO_SECRET_KEY=CHANGE_ME"
      - "INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://my-site:my-site@db/my-site"
      - "INVENIO_WSGI_PROXIES=2"
      - "INVENIO_RATELIMIT_STORAGE_URL=redis://cache:6379/3"
    command: ["celery -A invenio_app.celery worker --loglevel=INFO"]
    volumes:
      - uploaded_data:/opt/invenio/var/instance/data
    # depends_on:
    #   es:
    #     condition: service_started
    #   cache:
    #     condition: service_started
    #   db:
    #     condition: service_started
    #   mq:
    #     condition: service_started
volumes:
  static_data:
  uploaded_data:
  archived_data:
